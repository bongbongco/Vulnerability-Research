from winappdbg import Debug, HexDump, win32, CrashDump, Crash
from ntpath import basename, splitext
from os import listdir, path
from random import choice
from shutil import copyfile
import threading
import time
import os
import random
import sys

command_line = ["C:\\Program Files\\VUPlayer\\VUPlayer.exe" , "fuzzed.m3u"] # target program, mutate file
sample_file = "c:\\temp\\sample.m3u"

path_to = "c:\\temp\\test"


class Monitor:
	def __init__(self):
		self.runtime		= 3
		self.event 			= None
		self.debug 			= None
		self.loop_cnt		= 0
		self.seed_name 		= None
		self.mutated_name	= None
		self.pid			= None
		self.access_vi		= False 


	def debug_loop(self, e):
		code = e.get_event_code()
		self.event = e

		if code == win32.EXCEPTION_DEBUG_EVENT and e.is_last_chance():
			
			try:
				crash = Crash(e)
				crash.fetch_extra_data(e)
				dump_log = crash.fullReport(False)
			except:
				pass

			crash_type = dump_log.split('\n')[2].split(':')[1]

			dirname = '/' + crash_type + '_' + str(time.time())
			os.mkdir('./logs'+dirname)

			original_seed = copyfile(r"seed/%s" % self.seed_name, r"logs%s/%s" % (dirname,"original_seed"))
			mutated_seed =  copyfile(r"./%s" % self.mutated_name, r"logs%s/%s" % (dirname,"mutated_bin"))

			crash_path = "./logs" + dirname + "/crash_dump.txt"

			f = open(crash_path, 'w')
			f.write(dump_log)
			f.close()

			print "[***] Exception Occurred -> saved in \"%s\" folder" % dirname

			self.access_vi = True
			e.get_process().kill()
			self.debug.stop()


	def monitor_debug(self):
		counter = 0

		while counter < self.runtime:
			time.sleep(1)
			counter += 1
		print
		time.sleep(1)

		if not self.access_vi:
			print "[**] No Exception Occurred, stop the debugger process" 

		self.debug.stop()

	def start_debug(self):

		self.debug = Debug(self.debug_loop, bKillOnExit = True ) #  If True debugged processes are killed when the debugger is stopped.
		self.debug.execv(command_line) # execute target program (prameter command_line --> target program, mutate file)
		self.debug.loop()


	def start(self, loop_cnt, seed, mutated):
		
		self.loop_cnt	= loop_cnt # fuzzing loop 
		self.seed_name	= seed # seed file
		self.mutated_name = mutated # mutate file
		self.access_vi = False #

		print "[**] Debugger Activated "

		#pid = raw_input("Enter the PID of the process to attach to: ")
		#debug.attach(int(pid))

		dbg_thread = threading.Thread(target=self.start_debug)
		dbg_thread.setDaemon(0)
		dbg_thread.start() 

		counter = 0
		while self.pid == None: # waiting for process 5 second
			if counter < 5:
				time.sleep(1)
				counter = counter+1
				if counter >=5: 
					break

		monitor_thread = threading.Thread(target=self.monitor_debug) # retry 
		monitor_thread.setDaemon(0)
		monitor_thread.start()


class Mutator:
	def __init__(self):
		self.stream		= None
                # os.urandom(n) --> unsigned random byte * n
		self.bad_vector = [ [os.urandom(4),os.urandom(4),os.urandom(4),os.urandom(4),os.urandom(4),"\x00\x00\x00\x00","\xff\xff\xff\xff",], 
		["A"*5,"A"*17,"A"*33,"A"*65,"A"*129,"A"*257,"A"*513,"A"*1024,"A"*2049,"A"*4097,"A"*8193,"A"*12288,],
		["%99n","%s%p%x%d",".1024d","%.2049d","%n%n","%p%p","%x%x","%d%d","%s%s","%99999999999s","%08x","%%20d","%%20n","%%20x","%%20s","%#0123456x%08x%x%s%p%d%n%o%u%c%h%l%q%j%z%Z%t%i%e%g%f%a%C%S%08x%%","%s"*129,"%x"*257,],
		["\x3f\xff","\xff\x3f","\x7f\xff","\xff\x7f","\x80\x00","\x00\x80","\xfe\xff","\xff\xfe",],
		["\x00\x00\x01\x00","\x00\x01\x00\x00","\x00\x00\x10\x00","\x00\x01\x00\x00","\x00\x00\x01\x00","\x00\x10\x00\x00","\x3f\xff\xff\xff","\xff\xff\xff\x3f","\x7f\xff\xff\xfe","\xfe\xff\xff\x7f","\x7f\xff\xff\xff","\xff\xff\xff\x7f","\x80\x00\x00\x00","\x00\x00\x00\x80","\xff\xff\xff\xfe","\xfe\xff\xff\xff",]]

	def mutate_data(self, mutate_sbj):

		fd = open(mutate_sbj, "r+b")
		self.stream = fd.read() # read file
		

		stream_len = len(self.stream)
		mutate_cnt = int(stream_len*0.1) # mutate length
		# you need to muate bytestream as you want to
		for i in range(mutate_cnt):
		# 1 1 1 1 1 80 00 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ....  1 1 1 1
 			rand_offset = random.randint(0, stream_len-1) # mutating start position
			rand_vector = random.choice(random.choice(self.bad_vector)) # choose a bad vector
			rand_len = len(rand_vector) # save a length of vector

			fd.seek(rand_offset) # move file descriptor pointer
			fd.write(rand_vector) # write bad vector into afile

		fd.close()

		print "[**] File mutation completed: %s" % mutate_sbj
		print "[**] bad vector chosen : %s" % rand_vector
		print " ".join(hex(ord(n)) for n in rand_vector)

loop_cnt = 1000 # fuzzing loop

if __name__ == "__main__":

	monitor = Monitor()
	mutator = Mutator()

	try:
		seed_lst = listdir("seed") # seed file list
	except:
		print "Please create 'seed' folder in your working directory"
	
	count = 1

	while loop_cnt:

		print
		print "-" * 79
		print "[+] %d - New job is started" % count

		fuzzed = "fuzzed.m3u"
		temp = "temp.m3u"

		seed = choice(seed_lst) # random choice seed file
		print "[**] selected seed file: %s" % seed

		copyfile(r"seed/%s" % seed, r"./%s" % fuzzed) # copy seed file
		mutator.mutate_data(fuzzed) # param fuzzed --> copy seed file path
		
		copyfile(r"./%s" % fuzzed, r"./%s" % temp) # copy mutate seed file

		
		monitor.start(loop_cnt, seed, temp) # open target program & crash monitor

		loop_cnt -= 1
		count += 1

