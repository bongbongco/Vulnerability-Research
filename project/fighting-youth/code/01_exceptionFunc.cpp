int __fastcall sub_7455EE61(int a1, _DWORD **a2, int a3)
{
  _DWORD *v3; // ebx
  char **v4; // edi
  int v5; // esi
  int v6; // ebx
  int v7; // esi
  void *v8; // esp
  __int16 v9; // cx
  __int16 v10; // cx
  unsigned __int32 v11; // eax
  int (__cdecl **v12)(signed int); // esi
  int v13; // ebx
  int (__cdecl *v14)(_DWORD **, int); // edi
  int v15; // eax
  int v16; // eax
  int v17; // eax
  int result; // eax
  int v19; // eax
  void *v20; // esp
  int v21; // eax
  signed int v22; // eax
  unsigned __int8 v23; // cf
  int v24; // eax
  unsigned __int64 v25; // rax
  signed __int64 v26; // rax
  int v27; // eax
  int v28; // edx
  int v29; // edx
  int v30; // esi
  unsigned int v31; // edx
  unsigned int v32; // ecx
  int v33; // edi
  int v34; // esi
  int v35; // edi
  signed int v36; // ecx
  _DWORD *v37; // eax
  signed int v38; // edi
  int v39; // eax
  int v40; // eax
  int v41; // eax
  bool v42; // zf
  int v43; // esi
  int v44; // eax
  int v45; // ebx
  unsigned int v46; // eax
  char v47; // al
  char *v48; // esi
  unsigned int v49; // esi
  _BYTE *v50; // eax
  _BYTE *v51; // edi
  unsigned int v52; // ST10_4
  int v53; // ST0C_4
  int v54; // eax
  int v55; // [esp-1Ch] [ebp-1570h]
  int v56; // [esp-18h] [ebp-156Ch]
  signed __int16 v57; // [esp-18h] [ebp-156Ch]
  void *v58; // [esp-18h] [ebp-156Ch]
  char *v59; // [esp-14h] [ebp-1568h]
  unsigned __int16 v60; // [esp-10h] [ebp-1564h]
  int v61; // [esp-Eh] [ebp-1562h]
  int v62; // [esp-Ch] [ebp-1560h]
  __int64 v63; // [esp-8h] [ebp-155Ch]
  __int16 v64; // [esp-6h] [ebp-155Ah]
  signed int v65; // [esp-4h] [ebp-1558h]
  char v66[1004]; // [esp+Ch] [ebp-1548h]
  char *v67; // [esp+3F8h] [ebp-115Ch]
  int v68; // [esp+3FCh] [ebp-1158h]
  int v69; // [esp+400h] [ebp-1154h]
  void **v70; // [esp+404h] [ebp-1150h]
  int v71; // [esp+410h] [ebp-1144h]
  _DWORD **v72; // [esp+470h] [ebp-10E4h]
  int v73; // [esp+474h] [ebp-10E0h]
  int v74; // [esp+478h] [ebp-10DCh]
  int v75; // [esp+47Ch] [ebp-10D8h]
  _DWORD *v76; // [esp+480h] [ebp-10D4h]
  char v77; // [esp+14E0h] [ebp-74h]
  unsigned __int64 v78; // [esp+14E8h] [ebp-6Ch]
  __int16 v79; // [esp+14FCh] [ebp-58h]
  unsigned int v80; // [esp+14FEh] [ebp-56h]
  __int16 v81; // [esp+1502h] [ebp-52h]
  char v82; // [esp+1505h] [ebp-4Fh]
  unsigned int v83; // [esp+1506h] [ebp-4Eh]
  void *v84; // [esp+1510h] [ebp-44h]
  int v85; // [esp+1514h] [ebp-40h]
  unsigned int v86; // [esp+1518h] [ebp-3Ch]
  int v87; // [esp+151Ch] [ebp-38h]
  int v88; // [esp+1520h] [ebp-34h]
  _DWORD *v89; // [esp+1524h] [ebp-30h]
  unsigned int v90; // [esp+1528h] [ebp-2Ch]
  int v91; // [esp+152Ch] [ebp-28h]
  int v92; // [esp+1530h] [ebp-24h]
  unsigned int v93; // [esp+1534h] [ebp-20h]
  unsigned __int64 v94; // [esp+1538h] [ebp-1Ch]
  int v95; // [esp+1540h] [ebp-14h]
  int v96; // [esp+1544h] [ebp-10h]
  unsigned __int64 v97; // [esp+1548h] [ebp-Ch]
  _DWORD **v98; // [esp+1550h] [ebp-4h]
  unsigned int v99; // [esp+155Ch] [ebp+8h]
  int v100; // [esp+155Ch] [ebp+8h]

  v3 = *a2;
  v4 = 0;
  v98 = a2;
  v5 = a1;
  v89 = v3;
  v96 = 41;
  sub_745676A0(&v67, 0, 4328);
  v99 = a3 & 0xFFE7FFFF;
  v71 = v5;
  if ( v3 )
    v99 |= *v3 & 0x100000;
  v100 = *(_DWORD *)(v5 + 100) & 2 | v99;
  sub_74544B55(v98, &v85, 12);
  if ( ((unsigned int)&unk_FFFFFF & v85) == 3362637 )
    goto LABEL_139;
  if ( (v85 != 1179011410 && v85 != 875972178 || v87 != 1163280727)
    && (v85 != 1297239878 || v87 != 1179011393 && v87 != 1128679745) )
  {
    v6 = v74;
    v7 = (int)v98;
    goto LABEL_105;
  }
  v91 = 0;
  v94 = 12i64;
  v97 = 0i64;
  v88 = 0;
  if ( v85 == 1297239878 )
    v86 = _byteswap_ulong(v86);
  v6 = v74;
  v7 = (int)v98;
  while ( sub_74545150(v7, v94, HIDWORD(v94)) && sub_74544B55(v7, &v92, 8) == 8 )
  {
    if ( v85 == 1297239878 )
      v93 = _byteswap_ulong(v93);
    if ( v92 == 544501094 )
    {
      if ( v93 > (unsigned int)&unk_10000 )
        goto LABEL_139;
      v19 = 18;
      if ( v93 > 0x12 )
        v19 = v93;
      v20 = alloca(v19);
      v4 = (char **)((char *)&v59 + 2);
      HIWORD(v65) = 0;
      v21 = sub_74544B55(v98, (char *)&v59 + 2, v93);
      if ( v21 != v93 )
        goto LABEL_139;
      if ( HIWORD(v59) == 85 || HIWORD(v59) == 80 || HIWORD(v59) == 26447 )
        goto LABEL_50;
      if ( !v60 || !v61 || v60 * (((unsigned __int16)v65 + 7) >> 3) >= (signed int)&unk_10000 )
        goto LABEL_86;
      v7 = (int)v98;
      v6 = sub_7455EC39(v98, v100);
      v74 = v6;
      if ( !v6 )
      {
        v96 = *(int *)((char *)&v62 + 2) != 0 ? 44 : 6;
        goto LABEL_59;
      }
      v22 = v93;
      if ( v93 <= 0x12 )
        v22 = 18;
      *(_DWORD *)(v6 + 48) = sub_745410B4((char *)&v59 + 2, v22);
    }
    else if ( v92 == 875983716 )
    {
      sub_74544B55(v7, &v77, 28);
      v97 = v78;
    }
    else
    {
      if ( v92 == 1145983827 )
        goto LABEL_42;
      if ( v92 != 1296912195 )
      {
        if ( v92 != 1635017060 )
        {
          if ( v92 == 1952670054 )
            sub_74544B55(v7, &v88, 4);
          goto LABEL_51;
        }
LABEL_42:
        v91 = v94 + 8;
        if ( v93 != -1 )
          v97 = v93;
        if ( !v97 )
        {
          if ( !v4 )
            goto LABEL_139;
          v7 = (int)v98;
        }
        sub_74544B55(v7, &v90, 4);
        if ( v92 != 1145983827 )
        {
          if ( v90 == 1802532471 )
          {
            sub_74546CD9();
            goto LABEL_59;
          }
          goto LABEL_51;
        }
        v11 = _byteswap_ulong(v90) + 8;
        if ( v11 >= v97 )
          goto LABEL_139;
        v91 += v11;
        v97 -= v11;
LABEL_50:
        v7 = (int)v98;
        goto LABEL_51;
      }
      v8 = alloca(20);
      v4 = &v59;
      if ( sub_74544B55(v7, &v79, 18) != 18 )
        goto LABEL_139;
      v95 = 0;
      v7 = (int)v98;
      LOWORD(v59) = 1;
      LOBYTE(v9) = HIBYTE(v81);
      HIBYTE(v9) = v81;
      v64 = (v9 + 7) & 0xFFF8;
      if ( v87 == 1128679745 )
      {
        sub_74544B55(v98, &v84, 4);
        if ( v84 == (void *)842230886
          || v84 == (void *)875981926
          || v84 == (void *)842222662
          || v84 == (void *)875973702 )
        {
          LOWORD(v59) = 3;
          if ( v84 == (void *)875981926 || v84 == (void *)875973702 )
            v57 = 64;
          else
            v57 = 32;
          v64 = v57;
        }
        else if ( v84 == (void *)1953984371 )
        {
          v95 = 1;
        }
        else if ( v84 != &unk_736F7774 && v84 != (void *)1162760014 )
        {
          goto LABEL_116;
        }
      }
      LOBYTE(v10) = HIBYTE(v79);
      HIBYTE(v10) = v79;
      HIWORD(v59) = v10;
      sub_7455B840(v59, _byteswap_ulong(v83) >> (30 - v82));
      if ( !v62 )
      {
LABEL_86:
        v96 = 6;
        goto LABEL_139;
      }
      v6 = sub_7455EC39(v7, v100);
      v74 = v6;
      *(_DWORD *)(v6 + 32) = v95 + 1;
    }
LABEL_51:
    v94 += v93 + (unsigned __int64)(v93 & 1) + 8;
    if ( v94 > v86 || v91 && v4 )
      break;
  }
  if ( !v91 )
  {
    if ( !v6 )
      goto LABEL_105;
    sub_74546CD9();
LABEL_139:
    sub_7454556F(v98);
LABEL_164:
    v56 = v96;
    return sub_74541102(v56);
  }
  v23 = __CFADD__(v91, *(_DWORD *)(v7 + 24));
  *(_DWORD *)(v7 + 24) += v91;
  v24 = v97;
  *(_DWORD *)(v7 + 28) += v23;
  if ( !(HIDWORD(v97) | v24) )
  {
LABEL_97:
    if ( !v6 )
      goto LABEL_105;
    v73 = *((unsigned __int16 *)v4 + 7);
    v67 = v4[1];
    v69 = *(_DWORD *)(v6 + 12);
    v68 = *(_DWORD *)(v6 + 8);
    v70 = (void **)sub_7455D999;
    LODWORD(v26) = sub_7454528A();
    v94 = v26;
    v27 = sub_74567516((double)v26 * *(double *)(v6 + 24));
    *(_DWORD *)(v6 + 40) = sub_7455CEEA(v27, v28);
    *(_DWORD *)(v6 + 44) = v29;
    if ( *(_WORD *)v4 != 1 )
    {
      if ( v88 )
      {
        v30 = v69 * v68;
        *(_QWORD *)&v60 = v69 * v68;
        v32 = sub_74567590(*(_DWORD *)&v60, v62, v88, 0);
        HIDWORD(v94) = v31;
        if ( __PAIR__(v31, v32) + (signed int)v67 * v30 > *(_QWORD *)(v6 + 40) )
        {
          *(_DWORD *)(v6 + 56) = v32;
          *(_DWORD *)(v6 + 60) = v31;
          *(_DWORD *)(v6 + 40) = v32;
          *(_DWORD *)(v6 + 44) = v31;
        }
      }
    }
    v33 = (int)v4[2];
LABEL_103:
    v34 = v75;
    goto LABEL_121;
  }
  if ( v6 )
  {
    if ( *(_DWORD *)(v6 + 32) )
    {
      v63 = *((unsigned __int16 *)v4 + 6);
      *(_DWORD *)&v60 = _byteswap_ulong(v80);
      LODWORD(v25) = sub_74567590(*(_DWORD *)&v60, 0, v63, v65);
      if ( (_DWORD)v25 == (_DWORD)v97 || v25 < v97 )
        v97 = v25;
    }
LABEL_96:
    *(_QWORD *)(v7 + 16) = v97 + *(_QWORD *)(v7 + 24);
    goto LABEL_97;
  }
  if ( !dword_7458C1A0 )
    goto LABEL_96;
LABEL_105:
  v35 = dword_7456E028;
  if ( v89 )
  {
    v36 = dword_7456E02C;
    if ( dword_7456E02C || (v36 = 1000, v35 = dword_7456E028 >> 2, dword_7456E028 >> 2 <= 1000) )
      v35 = v36;
  }
  if ( sub_7454FD2D(v7) )
  {
    v37 = (_DWORD *)sub_7455034E(v7, v100);
    v76 = v37;
    if ( v37 )
    {
      v38 = v37[114];
      if ( v38 <= 0 )
        v38 = 150000;
      v67 = (char *)v76[112];
      v39 = v76[164];
      v33 = v38 >> 3;
      v69 = v76[163];
      v68 = v39;
      v70 = &off_7455D243;
      goto LABEL_103;
    }
  }
  v40 = sub_7454AC46(v7, v35, &v95);
  if ( v40 < 0 )
  {
LABEL_59:
    if ( dword_7458C1EC )
    {
      v12 = (int (__cdecl **)(signed int))off_7458C1E8;
      v13 = dword_7458C1EC;
      while ( !((int (*)(void))sub_74544726)() )
      {
        v65 = 1;
        v14 = (int (__cdecl *)(_DWORD **, int))v12[1](1);
        if ( v14 )
        {
          sub_74545150(v98, 0, 0);
          v15 = v14(v98, v100);
          if ( v15 )
          {
            result = sub_7455CE21(v15);
            *(_DWORD *)(result + 156) = v12[2];
            return result;
          }
          v16 = BASS_ErrorGetCode();
          if ( v16 != 41 )
            v96 = v16;
        }
        v12 += 3;
        if ( !--v13 )
          goto LABEL_67;
      }
      goto LABEL_139;
    }
LABEL_67:
    if ( ((int (*)(void))sub_74544726)() )
      goto LABEL_139;
    if ( dword_7458C1E4 || (v17 = sub_74543FA5(v98, v100)) == 0 )
    {
      if ( dword_7458C1A8 != 2 && (dword_7458C1A8 != 1 || !v89 || !v98[15]) )
        goto LABEL_139;
      v45 = sub_74544611();
      if ( *(_DWORD *)(v45 + 16) > (unsigned int)dword_7456E054 )
        goto LABEL_139;
      v95 = 0;
      v90 = 0;
      sub_74544FD6(0, 0);
      v66[sub_74544B55(v98, v66, 1000)] = 0;
      if ( v89 )
      {
        v46 = v89[22];
        v95 = v89[21];
        v90 = v46;
      }
      sub_7454556F(v98);
      v47 = v66[0];
      v48 = v66;
      while ( v47 && v47 < 32 )
        v47 = *++v48;
      if ( !((int (__cdecl *)(char *, const char *, signed int))unk_77080578)(v48, "http://", 7)
        || !((int (__cdecl *)(char *, const char *, signed int))unk_77080578)(v48, "#extm3u", 7)
        || !((int (__cdecl *)(char *, const char *, signed int))unk_77080578)(v48, "[playlist]", 10) )
      {
        *(_DWORD *)&v60 = &unk_7456B914;
        v59 = v48;
        while ( 1 )
        {
          v49 = sub_7459018C(v55, v58);
          if ( !v49 || sub_74544726(v59, *(_DWORD *)&v60) )
            break;
          while ( v49 > (unsigned int)v66 && *(_BYTE *)(v49 - 1) >= 65 )
            --v49;
          v50 = (_BYTE *)sub_7459014A(v49, &unk_7456B918);
          v51 = v50;
          if ( v50 )
            *v50 = 0;
          v52 = v90;
          v53 = v95;
          ++*(_DWORD *)(v45 + 16);
          v17 = BASS_StreamCreateURL(v49, 0, v100 & 0x7FFFFFFF, v53, v52);
          --*(_DWORD *)(v45 + 16);
          if ( v17 )
            return sub_7455CE21(v17);
          v54 = BASS_ErrorGetCode();
          if ( v54 != 41 && v54 != 20 )
            v96 = v54;
          if ( !v51 )
            goto LABEL_164;
          v58 = &unk_7456B914;
          v55 = (int)(v51 + 1);
        }
      }
      goto LABEL_164;
    }
    return sub_7455CE21(v17);
  }
  v65 = v100;
  v33 = 125 * v95;
  v23 = __CFADD__(v40, *(_DWORD *)(v7 + 24));
  *(_DWORD *)(v7 + 24) += v40;
  LODWORD(v63) = v7;
  *(_DWORD *)(v7 + 28) += (v40 >> 31) + v23;
  v41 = sub_74549FA6(v63, v65);
  v34 = v41;
  v75 = v41;
  if ( !v41 )
  {
LABEL_116:
    v96 = 44;
    goto LABEL_59;
  }
  v67 = *(char **)(v41 + 64);
  v42 = (*(_BYTE *)(v41 + 68) & 2) == 0;
  v69 = (v100 & 0x100) != 0 ? 4 : 2;
  if ( v42 )
    v68 = *(_DWORD *)(v41 + 56) + 1;
  else
    v68 = 1;
  v70 = (void **)sub_7455D213;
LABEL_121:
  v72 = v98;
  if ( v89 && !sub_7455B2B8(v98, v33, 0) )
  {
    sub_7455CF5E();
    v65 = 1;
    return sub_74541102(v56);
  }
  if ( v6 )
  {
    sub_74546D29(0, 0);
  }
  else
  {
    v65 = 0;
    LODWORD(v63) = 0;
    if ( v34 )
      sub_74549F16(0, v63, v65);
    else
      sub_7454FFD3(v63);
  }
  v43 = sub_7455E903(v100);
  if ( v43 )
  {
    v44 = (int)v98;
    *(_DWORD *)(v43 + 16) = v43;
    *(_DWORD *)(v44 + 120) = v43;
  }
  else
  {
    sub_7455CF5E();
  }
  return v43;
}

